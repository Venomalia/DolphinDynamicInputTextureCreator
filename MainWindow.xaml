<Window x:Class="DolphinDynamicInputTextureCreator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:converters="clr-namespace:DolphinDynamicInputTextureCreator.ValueConverters"
        xmlns:controls="clr-namespace:DolphinDynamicInputTextureCreator.Controls"
        xmlns:local="clr-namespace:DolphinDynamicInputTextureCreator"
        Closing="Window_Closing" 
        Title="Dolphin Dynamic Input Texture Creator" MinHeight="600" MinWidth="800">
    <Window.CommandBindings>
        <CommandBinding Command="New" CanExecute="NewData_CanExecute" Executed="NewData_Click" />
        <CommandBinding Command="Open" CanExecute="OpenData_CanExecute" Executed="OpenData_Click" />
        <CommandBinding Command="Save" CanExecute="SaveData_CanExecute" Executed="SaveData_Click" />
        <CommandBinding Command="{x:Static local:MainWindow.SaveAsCmd}" CanExecute="SaveDataAs_CanExecute" Executed="SaveAsData_Click" />
    </Window.CommandBindings>
    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="_New" Command="New" Icon="{DynamicResource Icon.New}" />
                <MenuItem Header="_Open..." Command="Open" Icon="{DynamicResource Icon.Open}" />
                <Separator />
                <MenuItem Header="_Save" Command="Save"  Icon="{DynamicResource Icon.Save}"/>
                <MenuItem Header="_Save As..." Command="{x:Static local:MainWindow.SaveAsCmd}" Icon="{DynamicResource Icon.SaveAs}"/>
                <Separator />
                <MenuItem Header="_Export as Dolphin pack..." Click="ExportData_Click" Icon="{DynamicResource Icon.Export}" />
                <MenuItem Header="_Import from Dolphin pack..." Click="ImportData_Click" Icon="{DynamicResource Icon.Import}" />
                <Separator />
                <MenuItem Header="_Save Startup Settings" Icon="{DynamicResource Icon.Setting}">
                    <MenuItem Header="_Save Suggestions"  Click="SaveStartupSuggestions_Click"/>
                    <MenuItem Header="_Save as Default Pack"  Click="SaveAsDefaultPack_Click"/>
                </MenuItem>
                <Separator />
                <MenuItem Header="_Quit" Name="QuitProgram" Click="QuitProgram_Click" Icon="{DynamicResource Icon.Close}"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="_Emulated Devices..." Name="EditEmulatedDevices" Click="EditEmulatedDevices_Click" Icon="{DynamicResource Icon.EmulatedDevices}"/>
                <MenuItem Header="_Host Devices..." Name="EditHostDevices" Click="EditDefaultHostDevices_Click" Icon="{DynamicResource Icon.HostDevices}"/>
                <MenuItem Header="_Metadata..." Name="EditMetadata" Click="EditMetadata_Click" Icon="{DynamicResource Icon.Metadata}" />
            </MenuItem>
        </Menu>
        <Grid DockPanel.Dock="Left">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" MinWidth="90" MaxWidth="320"/>
                <ColumnDefinition Width="6*" />
            </Grid.ColumnDefinitions>
                <controls:TexturePicker></controls:TexturePicker>
            <Grid Grid.Column="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
                <StackPanel Orientation="Horizontal" Grid.Row="0">
                    <Label Content="Choose an emulated control to map in the texture:" Margin="0 0 5 0" />
                    <ComboBox ItemsSource="{Binding EmulatedDevices}" Margin="0 0 0 0" Width="100" x:Name="EmulatedDeviceCB" SelectedValue="{Binding SelectedRegionBrush.SelectedEmulatedDevice}" VerticalAlignment="Center">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.Style>
                            <Style TargetType="ComboBox">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EmulatedDevices.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                    <Label Content="And key:" Margin="5 0 5 0" />
                    <ComboBox ItemsSource="{Binding ElementName=EmulatedDeviceCB, Path=SelectedItem.EmulatedKeys}" SelectedValue="{Binding SelectedRegionBrush.SelectedEmulatedKey}" VerticalAlignment="Center" Width="120" Margin="0 0 5 0">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                        <ComboBox.Style>
                            <Style TargetType="ComboBox">
                                <Setter Property="IsEnabled" Value="True"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SelectedRegionBrush.SelectedEmulatedDevice.EmulatedKeys.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding EmulatedDevices.Count}" Value="0">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                    <Button Margin="5,0,5,0" MinWidth="35" Content="{DynamicResource Icon.FillRegion}" VerticalAlignment="Center" Command="{Binding FillRegionCommand}" ToolTip="Fill Region"/>
                    <ToggleButton Margin="2 0" Height="20" IsChecked="{Binding SelectedRegionBrush.UseDarkBackground}" >
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Content" Value="{DynamicResource Icon.CanvasLight}" />
                                <Setter Property="ToolTip" Value="Use the Light Canvas." />
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Content" Value="{DynamicResource Icon.CanvasDark}" />
                                        <Setter Property="ToolTip" Value="Use the Dark Canvas." />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <ToggleButton Margin="2 0" Height="20" IsChecked="{Binding SelectedRegionBrush.Subpixel}">
                        <ToggleButton.Style>
                            <Style TargetType="{x:Type ToggleButton}">
                                <Setter Property="Content" Value="{DynamicResource Icon.Grid}" />
                                <Setter Property="ToolTip" Value="Use the default pixel grid." />
                                <Style.Triggers>
                                    <Trigger Property="IsChecked" Value="true">
                                        <Setter Property="Content" Value="{DynamicResource Icon.NoGrid}" />
                                        <Setter Property="ToolTip" Value="Use no pixel grid, allows the selection of sub pixels" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                </StackPanel>
                <controls:PanZoom x:Name="PanZoom" Grid.Row="1"></controls:PanZoom>
            </Grid>
            <GridSplitter Background="Gray" Grid.Column="1" Width="3" Height="200" ResizeDirection="Columns" HorizontalAlignment="Left"/>
        </Grid>
    </DockPanel>
</Window>